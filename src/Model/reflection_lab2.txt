
1. Your design probably has a type called something like Car or Vehicle that is a supertype to both Volvo and Scania. 
What is the contract for gas() and brake() in this type? Do the implementations of gas() and brake() in both Volvo and 
Scania follow this contract? Does your design follow the Liskov Substitution Principle?

kontraktet för gas:
Inputen till gas är en double, och vi får ingen output, utan resultatet är att currentspeed har ett högre värde.

kontrakt för brake:
Likt gas, är inputen till brake en double och vi får ingen direkt output, utan currentspeed kommer att anta ett lägre värde

Metoderna gas() och brake() kallas på av både Volvo240 och Saab95 från Vehicle. Metoden gas kallar på metoden incrementspeed(),
som är beroende av en speedfactor. Dessa är implementerade på olika sätt i de olika bilmodellerna, vilket skulle kunna göra att 
de inte följer Liskovs Substitution Principle. Eftersom (nästan) alla bilar har egna värden som avgör deras speedfactor
finns det inga gemensamma värden att nämna i Vehicle, förutom att metoden för speedfactor ska existera i alla subklasser.
Därför är den gjord som en abstrakt metod, alltså behövs en implementering i alla bilmodeller. 
Detta gör att vi endast lägger till information när vi implementerar gas och brake, vilket är tillåtet enligt Liskovs 
Substitution Principle.



2. How did you handle duplicated code between Scania, the car transporters and the repair shops?
Explain how you decided when to use subclassing and when to use composition and delegation.

Eftersom Scania och CarTransporter också är olika fordon, kändes det passande att göra dem till subklasser av Vehicle med. 
Det var dock inte kvar länge, och vi valde att göra en ny superklass Truck, som inheritar allt från Vehicle, men ger speedfactor
ett temporärt värde på 1 (vi har inte fått någon info om vad den ska göra för lastbilarna). Scania ÄR en lastbil, 
och alla lastbilar delar attributen i Truck, därför valde vi superklass.
Sedan insåg vi att både CarTransporter och CarWorkshop måste ha förmågan att lasta på och av bilar med liknande krav. 
Då gjorde vi klassen load som har metoder som vi använde med hjälp av delegation och composition 
Eftersom CarTransporter HAR ett avstånd och HAR förmågan att lasta av och på, så lämpar sig inte 
superklasser i detta fallet.

Did you need to modify the design from lab 1 in order to make these extensions? If so, how could you have noticed that your design
from Lab 1 did not follow the Open-Closed Principle before you started working on Lab 2?

Vi använde oss av superklass och subklass mellan bilarna och Vehicle i labb 1, så vi behövde inte ändra val av polymorfism mellan
 klasserna vehicle, Saab95 och Volvo240
Däremot hade vi inte gjort turbon i Saab95 till en interface. Det var inte eller helt nödvändigt i denna labb, men interface hade 
gjort det lättare att göra en ny bil med turbo vid behov. Därför ändrade vi den.